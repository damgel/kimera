{"name":"Hibernate Kimera","tagline":"Hibernate Kimera: Una forma simple de acceder a tu base de datos","body":"### ¿Qué es Hibernate Kimera?\r\nHibernate Kimera es una libreria muy ligera para realizar la conexión de la capa de negocios con la capa de acceso a datos, aplicando el patron fachada para ocultar toda la complejidad inherente a la capa de acceso a datos, ofreciendo una interfaz simple y amigable al desarrollador\r\n\r\n### ¿Qué ofrece de diferente?\r\nHibernate Kimera esta pensado para utilizar la menor cantidad de líneas de código a la hora de acceder a los datos de una base de datos relacional. Posee un único objeto (Kimera) que contiene todos los métodos necesarios para obtener, persistir, actualizar o remover registros de la base de datos (independientemente de la tabla) de manera sencilla. Para esto utiliza Tipos genéricos, con lo cual basta con indicar la clase del objeto mapeado en Hibernate para poder realizar las operaciones antes mencionadas.\r\n\r\n### Un ejemplo sencillo\r\nSupongamos que tenemos una tienda de mascotas, en la misma existen mascotas, empleados, accesorios, jaulas, etc. Nuestra base de datos tendra minimamente las tablas \"mascota\",\"empleados\",etc. Primeramente mapeamos la base de datos utilizando Hibernate Tools (creamos los archivos hibernate.cfg.xml, hibernate.revenge.xml y los correspondientes POJO's) y ya estamos en condiciones de utilizar Hibernate Kimera.\r\n```java\r\nKimera k = new Kimera();\r\nMascota gato = k.byID(\"nombre\", \"Tom\", Mascota.class); //Toda mascota tiene un nombre, existe en la tabla Mascota una mascota con nombre = \"Tom\"\r\nEmpleado emp = k.byID(\"dni\",\"34093153\", Empleado.class); //Obtiene el empleado con DNI=34093153 de la tabla empleado\r\nemp.setDni(\"31526874\");\r\nk.update(emp); //Actualiza el dni del empleado \r\nList<Accesorio> accesorios = k.all(Accesorio.class); //Obtiene todos los accesorios de la tabla accesorio\r\nMascota bethoven = new Mascota();\r\nbethoven.setNombre(\"Bethoven\");\r\nbethoven.setRaza(\"Perro\");\r\nk.add(bethoven); //Agrega una nueva mascota a la tabla Mascota\r\n```\r\nComo se puede apreciar el objeto Kimera infiere los tipos de objetos devueltos a partir de la clase pasada como parametro, esto posibilita que la libreria ofrezca una flexibilidad y reutilización muy alta. <br />\r\nLas combinaciones son ilimitadas, solo deja volar tu imaginación y Hibernate Kimera te ayudará a realizarlas. <br />\r\n\r\n### ¿Puedo llamar a procedimientos almacenados?\r\nSi. Hibernate Kimera te proporciona un método de bajo nivel para realizar peticiones en SQL . Por ejemplo\r\n```java\r\nKimera k = new Kimera();\r\nString query = \"SELECT * FROM mascota m WHERE m.nombre = :nombre\"; \r\nMap<String, Object> params = new HashMap<>();\r\nparams.put(\"nombre\",\"Tom\");\r\nList result = k.callProcedure(query,params); //Obtiene una lista de objetos tipo Object con todas las mascotas con nombre \"Tom\"\r\n```\r\n\r\n### Sobre el autor\r\nHibernate Kimera es una idea de [Gonzalo H. Mendoza](https://www.facebook.com/Gonzalo.Humen), Desarrollador Java Jr. En su afan de resolver problemas de diferentes índoles pensó y escribió el código base de Hibernate Kimera, compartiendo su conocimiento con todo aquel que quiera usarlo para realizar nuevos desarrollos.\r\n\r\n### ¿Te interesa contactarnos?\r\nVisitanos en Facebook [Div-ID Software](https://www.facebook.com/dividsoftware/) <br />\r\nO en nuestro canal de [Youtube](https://www.youtube.com/channel/UCmTo3RyFzlcox7lx0CVl3ww)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}